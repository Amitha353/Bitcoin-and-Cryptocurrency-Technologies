2.1 Centralization vs Decentralization
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------
- Almost no system is purely decentralized or centralized.
- Example : Email - follows the SMTP (Simple Mail transfer Protocol) - decentralized protocol, but dominated by centralized webmail services.

* Aspects of decentralization in Bitcoin:
1. Who maintains the ledger?
2. Who has authority over which transactions are valid?
3. Who creates new bitcoins?
4. Who determines how the rules of the system change?
5. How do bitcoins acquire exchange value?

* Beyond the protocol : exchanges, wallet softwares, service providers, etc

* Three aspects of bitcoins and where they fal on the centralization and decentralization spectrum:
1. Peer-to-peer network : (closest to decentralization) 
    - open to anyone, 
    - low barrier entry. 
    - Anybody can run a bitcoin node - download the software and run it.
2. Mining : (Not very decentralized)
    - open to anyone.
    - but requires a very high capital cost
    - inevitable concentration of power
    - undesirable;
 3. Updates to softwares: (Not purely decentralized)
    (Coenceptually anybody can look into the specifications and develop their own bitcoin node, but practically doesn't work so.)
    - Core developers trusted by the community work on the softwares;
    - Developers have great power;

----------------------------------------------------------------------------------------------------------------------------------------
2.2 Distributed consensus
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------
- A challenge to solve inorder to build a distributed e-cash system is called distributed consensus. (how to decentralize ScroogeCoin);
- Traditional Motivation - Distributed Systems
Big companies have thousands or millions of servers that form a massive distributed database and any action performed by users will be stored multiple databases. When a new comment, post, etc comes in then in the massive backend there might be multiple copies of this action. The server must ensure that all copies are saved in the respective databases or none are saved otherwise it could cause inconsistency in the database data.
- Distributed consensus protocol - (maps arbitrary keys to arbitrary values) it will enable multiple applications.
    1. DNS (Domain Name System) - Distributed Domain Name System - mapping between human-understandable domain names io IP addresses.
    2. Public key directory - Mapping between user email addresses and to their public keys.
    3. Stock trades - who's transfered what units of which stock to whom.
    4. Altcoins - (Altcoins are systems built on Bitcoin like principles to achieve different goals, currency systems, not-currency systems (DNS, PKD, stock trades));
    
* Technical definition of Distributed Consensus:
    - Imagine there is a fixed number n, of nodes or processes, each of these nodes has some input value and then a consensus protocol happens, and the two requirements on this consensus protocol are:
    a. The protocol should terminate and all correct nodes decide/agree on the same value.
    b. This value must have been proposed by some correct node.
    
* Distributed consensus can work in bit-coin  
--------------------------------------------
-> Bitcoin is a peer-to-peer system.
-----------------------------------
- When Alice wants to pay Bob: she broadcasts the transaction to all Bitcoin nodes.
        ____________________
Alice  | signed by Alice    | --------->
       |--------------------| --------->           Nodes .....
       | Pay to pk(bob): H()| --------->
       |--------------------| --------->
       
* Structure of transaction (Similar to GoofyCoin) - 
    - Signed by Alice(This is required by the other nodes to verify it has actually come from Alcie), and 
    - has Bob public key (Address at which Bob wants to receive the bitcoin).
    - Hash (way for Alice to link together this transaction/coin to her receipt of this coin from someone else previously).

* In case Bob's computer is not in the picture of the nodes, then if he wants to be notified that this transaction did occur and he got paid, he might have to run a bitcoin node that is in one of these peer-to-peer nodes, in order to listen in on the network and be sure that he received the transaction.

* How consensus could work in Bitcoin
-------------------------------------
- All nodes have a sequences of blocks of transactions they've reached consensus on.
- Each node has a set of outstanding transactions it's heard about.

- Could have a sequence of blocks that everybody has agreed upon. (Block - A sequence of transactions);

___________    ____________     ___________         
|    Tx   |    |    Tx    |    |    Tx    |   
-----------    ------------    ------------
|    Tx   |    |    Tx    |    |    Tx    | 
-----------    ------------    ------------
|   ...   |    |    ...   |    |    ...   |
-----------    ------------    ------------
|    Tx   |    |    Tx    |    |    Tx    |
-----------    ------------    ------------

- Consider there are 3 nodes in the system - Each of whom proposes, has a input , a set of tranactions it has heard about.
- They execute together some consensus protocol and for the consensus protocol to succeed, you can select any valid block, even if it is a valid block propsed by only one node.  
                   A
               ____________          
               |    Tx    |     
               ------------    
               |    Tx    |    
               ------------    
               |    ...   |    
               ------------    
               |    Tx    |    
               ------------   
          /\              /\
          /                \
        /                    \
      /       Consensus        \  
    /          protocol          \
   \/  B   <------------->       \/  C
___________                  ___________         
|    Tx   |                 |    Tx    |   
-----------                 ------------
|    Tx   |                 |    Tx    | 
-----------                 ------------
|   ...   |                 |    ...   |
-----------                  ------------
|    Tx   |                 |    Tx    |
-----------                 ------------

- For a block to be valid, all of these transactions must have the right crypto signatures, etc. 
- Maybe the A block gets selected and gets added to the ceonsensus block chain and so forth.

                                                        A
___________    ____________     ___________          ___________         
|    Tx   |    |    Tx    |    |    Tx    |         |    Tx    |     
-----------    ------------    ------------         ------------
|    Tx   |    |    Tx    |    |    Tx    |         |    Tx    | 
-----------    ------------    ------------         ------------
|   ...   |    |    ...   |    |    ...   |         |    ...   |
-----------    ------------    ------------         ------------
|    Tx   |    |    Tx    |    |    Tx    |         |    Tx    |
-----------    ------------    ------------         ------------ 

* Why consensus is hard
------------------------
1. Nodes may crash
2. Nodes may be malicious

-> Network is imperfect
a. Not all pairs of nodes are connected.
b. Faults in network.
c. Latency (Happens over the Internet) - no notion of global time (not all nodes can agree to a common ordering of events based on observing timestamps)

* Many impossible results (Due to the above issues)
--------------------------
a. Byzantine generals problem
b. Fischer-Lynch-Paterson (deterministic nodes): consensus impossible with a single faulty node.

* Some well-known protocols
---------------------------
-> Paxos - Never produces inconsistent result, but can (rarely) get stuck.

* Understanding impossibility results (consensus model)
-------------------------------------------------------
-> These results say more about the model than about the problem.
-> The models were developed to study systems like distributed databases.
[Bitcoin violates a lot of the assumptions that go into the models, therefore consensus in bitcoins work better in theory and practice];

* Bitcoin consensus: theory & practice
-----------------------------------------
-> Bitcoin consensus work better in practice than theory. Theory important to help predict unforseen attacks.

* Things Bitcoin does differently
----------------------------------
a. Introduces incentives:
    - possible only because it's a currency.
b. Embraces randomness:
    - Does away with the notion of a specific end-point (start-point, end-point);
    - Consensus happend over long time scales - about 1 hour. (Even after that time, you are not sure if the transaction/block you are interested in has made it into the consensus block chain). (Instead as time goes on, the probability that it has made it goes higher and higher, and the probability of you making an assumption about the transaction reduces exponentially).
----------------------------------    
Question 1: Which of these factors make distribution consensus hard?

a. Nodes may crash - Correct 
b. Nodes may be taken over by malware - Correct 
c. Encrypted messages may be intercepted and decrypted - Wrong
d. There is latency on the network - Correct 
----------------------------------
Question 2:Why is Bitcoin able to reach consensus in practice despite this being a generally difficult problem? 

a. Financial incentives cause participants to work together - Correct 
b. Only small groups of nodes have to reach consensus rather than the network having to globally reach consensus - Wrong
c. The order of blocks doesnâ€™t matter for consensus - wrong
d. Consensus only has to be reached over long time scales - Correct 
----------------------------------------------------------------------------------------------------------------------------------------

    

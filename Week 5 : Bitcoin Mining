----------------------------------------------------------------------------------------------------------------------------------------
5.1 : The task of Bitcoin Miners
----------------------------------------------------------------------------------------------------------------------------------------

* Mining Bitcoins in 6 easy steps
----------------------------------
(How to become a Miner)

1. Join the network, (become a Bitcoin node), listen for transactions.
    - Validate all proposed transactions.
2. Listen for new blocks, maintain block chain.
    - When a new block is proposed, validate it.
3. Assemble a new valid block.
4. Find the nonce to make your block valid. (Hard - computationally).
5. Hope everybody accepts your new block.
6. Profit! (>25 BTC / block -> $15,000).

* Finding a valid block
----------------------
-> Two main hash-based data structures.
  1. block-chain - each block's header points to the previous block header in the chain.
  2. Merkel tree within each block - hash-based binary tree of all the transactions included within that block.

# Miners assembly all the transactions from the pending pool into the tree.
# Create a block with the right header that points to the previous block.
# Then need to start searching over the nonce field to try to have the hash of the block headers start with the required number of zeroes.
# Can start with a nonce of all 0's (32-bit) - get an incorrect hash; Keep trying of other nonces (nonce 1 -> hash, etc);
# Can try every single possiblity for the 32-bit nonce, you may not get the right hash, need to make further changes.

# Parameter in the coinbase transaction - where the miners are minting new coins and claiming it.
# There is an "extra nonce" parameter in the coin-base, after exhausting all possible nonces in the block-header, then the extra-nonce is used.
# The extra nonces in the coinbase transaction will be incremented and the hash of it will be computed, and will start searching the block-header.
   **** Changing a single parameter in the coinbase transaction, will require the entire merkel tree of transaction to change.
   - Changing the extra nonce in the coinbase transaction is expensive than changing the nonce in the header, hence use the outer-loop. 
    - outer loop - changes nonce in the coin-base parameter
    - inner loop - changes nonce in the block header.
 # Difficult computation, but eventually will find the right combination between the extra nonce in the coinbase transaction and the nonce in the header.
 # Will find a block with a hash with sufficient 0's to make it valid -> published and announce and profit.
 
     -------------------                                --------------------
     |                 |                                |                  |
     |  ---------------|----                            |   ---------------|----
     |  | prev:      H( )  |                            |   | prev:      H( )  |
     |  --------------------                            |   --------------------
     |  | mrkl_root: H( )  |                            |   | mrkl_root: H( )--|----------------
-----|  -------------------- <--------------------------|   --------------------                |
        | nonce: 0x7a83    |                                | nonce: 0xf77a    |                |
        --------------------                                --------------------                |
        | hash: 0x0000     |                                | hash: 0x0000...  |                |
        --------------------                                --------------------                |
                                                                                                |
                                                                    -----------------------------                         
                                                                    |
                                                                    |
                                                                   \ /
                                                            --------------------
                                                            |  H( )       H( ) |
                                                            -----|----------|---
                                                                 |          |
                                                        ----------          ----------- 
                                                        |                             |
                                                       \ /                           \ /
                                              --------------------                --------------------
                                              | H( )        H( ) |                | H( )        H( ) |
                                              ----/-----------|---                ----|-----------|---
                                                 /            |                       |           |
                                                /             |                       |           |
                                               /              |                       |           |   
                                              \/             \ /                     \ /         \ /
                                   ------------------    ---------------    ---------------   --------------                          
                                   | 25.0 ---> A     |   | transaction |    | transaction |   | transaction |  
                                   |  coinbase:      |   ---------------    ---------------   --------------- 
                                   |  0x000...01     |
                                    ------------------


* Mining difficulty "target" (2014-08-07)
---------------------------------------------
-> The hash of any valid block needs to below the value shown below.
-> It's a 256-bit hash output value. (Using SHA 256 to hash function)
-> Atleast first 64-bit are 0's
-> Current difficulty = 2 ^66.2 ~ 84 quintillion.

* Setting the minning difficulty
-----------------------------------
-> Every two weeks compute: It's based on how efficient the miners were over the previous two weeks.

next_difficulty = previous_difficulty *         (2 weeks)
                                        ------------------------------        
                                         (time to mine last 2016 blocks)
                                                                    / \
                                                                     |
                                                                     |
                                        Expected number of blocks in 2 weeks at 10 minutes/block
            
-> Over time mining difficulty keeps increasing (not steady, exponentail increase, it's based on how many miners enter into the market).
-> On an average a block is to be found every 10 miinutes. At the beginning of two weeks the difficulty in practice to get a block is about 9 minutes, but eventually towards the end of the two-week period the time to get the new block will be about 8 minutes.

Q. Which of the following are true about Bitcoin miners?

a. The target hash has become so small that the block header nonce alone isnâ€™t generally large enough to allow miners so search enough of the hash output space to find a valid block - correct;

b. Bitcoin miners can more efficiently mine for blocks by specifically targeting parts of the nonce search space that have more puzzle solutions

c. Over a 2 week period, the average time to mine a block is always 10 minutes

d. The mining difficulty is recomputed roughly every 2 weeks to keep the proof-of-work puzzle difficult - correct;  

----------------------------------------------------------------------------------------------------------------------------------------
5.2 Mining Hardware
----------------------------------------------------------------------------------------------------------------------------------------

* SHA- 256
-----------
-> It is a general purpose crypotographich hash function.
        - Part of SHA-2 family : SHA-224, SHA-384, SHA-512;
->  Published in 2001      
-> Designed by the NSA
-> Remains unbroken cryptographically. (Weaknesses known);
-> SHA-3 (replacement) under standardization.







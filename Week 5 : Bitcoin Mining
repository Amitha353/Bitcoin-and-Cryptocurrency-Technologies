----------------------------------------------------------------------------------------------------------------------------------------
5.1 : The task of Bitcoin Miners
----------------------------------------------------------------------------------------------------------------------------------------

* Mining Bitcoins in 6 easy steps
----------------------------------
(How to become a Miner)

1. Join the network, (become a Bitcoin node), listen for transactions.
    - Validate all proposed transactions.
2. Listen for new blocks, maintain block chain.
    - When a new block is proposed, validate it.
3. Assemble a new valid block.
4. Find the nonce to make your block valid. (Hard - computationally).
5. Hope everybody accepts your new block.
6. Profit! (>25 BTC / block -> $15,000).

* Finding a valid block
----------------------
-> Two main hash-based data structures.
  1. block-chain - each block's header points to the previous block header in the chain.
  2. Merkel tree within each block - hash-based binary tree of all the transactions included within that block.

# Miners assembly all the transactions from the pending pool into the tree.
# Create a block with the right header that points to the previous block.
# Then need to start searching over the nonce field to try to have the hash of the block headers start with the required number of zeroes.
# Can start with a nonce of all 0's (32-bit) - get an incorrect hash; Keep trying of other nonces (nonce 1 -> hash, etc);
# Can try every single possiblity for the 32-bit nonce, you may not get the right hash, need to make further changes.

# Parameter in the coinbase transaction - where the miners are minting new coins and claiming it.
# There is an "extra nonce" parameter in the coin-base, after exhausting all possible nonces in the block-header, then the extra-nonce is used.
# The extra nonces in the coinbase transaction will be incremented and the hash of it will be computed, and will start searching the block-header.
   **** Changing a single parameter in the coinbase transaction, will require the entire merkel tree of transaction to change.
   - Changing the extra nonce in the coinbase transaction is expensive than changing the nonce in the header, hence use the outer-loop. 
    - outer loop - changes nonce in the coin-base parameter
    - inner loop - changes nonce in the block header.
 # Difficult computation, but eventually will find the right combination between the extra nonce in the coinbase transaction and the nonce in the header.
 # Will find a block with a hash with sufficient 0's to make it valid -> published and announce and profit.
 
     -------------------                                --------------------
     |                 |                                |                  |
     |  ---------------|----                            |   ---------------|----
     |  | prev:      H( )  |                            |   | prev:      H( )  |
     |  --------------------                            |   --------------------
     |  | mrkl_root: H( )  |                            |   | mrkl_root: H( )--|----------------
-----|  -------------------- <--------------------------|   --------------------                |
        | nonce: 0x7a83    |                                | nonce: 0xf77a    |                |
        --------------------                                --------------------                |
        | hash: 0x0000     |                                | hash: 0x0000...  |                |
        --------------------                                --------------------                |
                                                                                                |
                                                                    -----------------------------                         
                                                                    |
                                                                    |
                                                                   \ /
                                                            --------------------
                                                            |  H( )       H( ) |
                                                            -----|----------|---
                                                                 |          |
                                                        ----------          ----------- 
                                                        |                             |
                                                       \ /                           \ /
                                              --------------------                --------------------
                                              | H( )        H( ) |                | H( )        H( ) |
                                              ----/-----------|---                ----|-----------|---
                                                 /            |                       |           |
                                                /             |                       |           |
                                               /              |                       |           |   
                                              \/             \ /                     \ /         \ /
                                   ------------------    ---------------    ---------------   --------------                          
                                   | 25.0 ---> A     |   | transaction |    | transaction |   | transaction |  
                                   |  coinbase:      |   ---------------    ---------------   --------------- 
                                   |  0x000...01     |
                                    ------------------


* Mining difficulty "target" (2014-08-07)
---------------------------------------------
-> The hash of any valid block needs to below the value shown below.
-> It's a 256-bit hash output value. (Using SHA 256 to hash function)
-> Atleast first 64-bit are 0's
-> Current difficulty = 2 ^66.2 ~ 84 quintillion.

* Setting the minning difficulty
-----------------------------------
-> Every two weeks compute: It's based on how efficient the miners were over the previous two weeks.

next_difficulty = previous_difficulty *         (2 weeks)
                                        ------------------------------        
                                         (time to mine last 2016 blocks)
                                                                    / \
                                                                     |
                                                                     |
                                        Expected number of blocks in 2 weeks at 10 minutes/block
            
-> Over time mining difficulty keeps increasing (not steady, exponentail increase, it's based on how many miners enter into the market).
-> On an average a block is to be found every 10 miinutes. At the beginning of two weeks the difficulty in practice to get a block is about 9 minutes, but eventually towards the end of the two-week period the time to get the new block will be about 8 minutes.

Q. Which of the following are true about Bitcoin miners?

a. The target hash has become so small that the block header nonce alone isnâ€™t generally large enough to allow miners so search enough of the hash output space to find a valid block - correct;

b. Bitcoin miners can more efficiently mine for blocks by specifically targeting parts of the nonce search space that have more puzzle solutions

c. Over a 2 week period, the average time to mine a block is always 10 minutes

d. The mining difficulty is recomputed roughly every 2 weeks to keep the proof-of-work puzzle difficult - correct;  

----------------------------------------------------------------------------------------------------------------------------------------
5.2 Mining Hardware
----------------------------------------------------------------------------------------------------------------------------------------

* SHA- 256
-----------
-> It is a general purpose crypotographich hash function.
        - Part of SHA-2 family : SHA-224, SHA-384, SHA-512;
->  Published in 2001      
-> Designed by the NSA
-> Remains unbroken cryptographically. (Weaknesses known);
-> SHA-3 (replacement) under standardization.

SHA-256 in more depth
-----------------------
# There is a 256-bit state in SHA-256 that split uo into eight 32-bit words.
# Optimized for 32-bit platforms.
# Each round some of those words are taken and there are four different operations performed on them. The words are at their bit-level
 and AND and other logic operations are performed on them.
# Then the number of words in the state are taken  - some with these operatins performed on them and added together with
    "mod 32" in a pipeline.
# Then the result of all these additions is wired over to the first word of the state and the entire state shifts over.

# All the above steps occur in just one round of SHA compression function.
# A complete computation of the SHA-256 takes about 80 times.
# In each iteration there are slightly different constants applied at one step.

-> certain design ideas date back to classic linear feedback shift registers - approach to cryptographic design.

# This is the work of the Miners, and they are supposed to do it as fast as possible.

-> To do this we need to deal with:
    1. 32-bit words
    2. 32-bit additions
    3. Bit-wise logic

    -------     -------      -------     -------    ___     -------     -------     -------     -------
    |     |     |     |      |     |     |     |   |_|_|    |     |     |     |     |     |     |     |
--->|  a  | --->|  b  | ---> |  c  | --> |  d  |-->|_|_| -->|  e  | --> |  f  | --> |  g  | --> |  h  |----- 
|   |     |  |  |     |      |     |     |     |    / \     |     |  |  |     |     |     |     |     |    | 
|   -------  |  -------      -------     -------     |      -------  |   -------     -------     -------   |
|            |                                       |               |                                     | 
|            |                                       |               |                                     |
|            |                                       |               |                                     | 
|          ------       -----------------            |             ------            ----------------      |
|          | âˆ‘(0)|     (   Maj(a, b, c)  )           |             | âˆ‘(1)|          (  Che(e, f, g)  )     |      x80 iterations
|           -----       -----------------            |             -------           ----------------      | 
|            |                 |                     |                |                    |               |
|            |                 |                     |                |                    |               | 
|            |                 |                     |                |                    |               |
|           \ /               \ /                    |               \ /                  \ /              |
|         ------             ------                  |             -------               -------           |
|---------|--|--|<-----------|--|--|-------------------------------|--|--|<--------------|--|--|<----------|  
          -------            -------                               -------               -------             round
                                                                                           / \               constants
                                                                                            |
                                                                                            |    ----
                                                                                          ( W(j) |-|-| K(j))  
                                                                                                 ----- 

* CPU Minig
-------------
-> First generation of mining when Bitcoin was proposed was all done on general purpose CPUs.
-> It searched over nonces in a simple linear manner, computed SHA-256 in software and checked if the results was a valid block.
-> The SHA-256 is to be computed twice.

while (1) {
    HDR[kNoncePos]++;
    IF (SHA256(SHA256(HDR))  <  (65535 << 208) / DIFFICULTY)
        return;
}

# Throughput of a high-end PC = 10-20 MHz ~ 2^24;
# It would take 139,461 years on an average to find a block.

* GPU mining
-------------
-> Second generation of mining
-> GPU designed for high-performance graphics.
    - high parallelism.
    - high throughput.
-> First used for Bitcoin ca. October 2010.
-> Implemented in OpenCL
     - Later: hacks for specific cards.

* Advantages of GPU Mining
---------
1. Easily available, easy to set up.
2. parallel ALUs (Arithmetic Logical Units)
3. bit-specific instructions (useful for SHA-256)
4. can drive many GPU's from 1 CPU.
5. can overclock! (GPU's can be made to run faster);

* "Goodput" (Measure of Mining success)
----------------------------------------
# Observation : some errors are okay (may miss a valid block);
# Goodput : throughput x success rate; 
    - throughput - how quickly you are finding blocks.
    - success rate - how often does the computation actually have errors.
# Worth overclocking by 50% with 30% errors!

* Disadvantages of GPU mining
-------------------------------
1. poor utilization of hardware.
2. poor cooling.
3. large power draw.
4. few boards to hold multiple GPUs.

Throughput on a good card = 20 - 200 MHz ~ 2^27
~ 173 years on average to find a block w / 100 cards!

* FPGA mining
-------------------
-> Field Programmable Gate Area.
-> First used for Bitcoin ca. June 2011.
-> Implemented in Verilog.

* FPGA mining Advantages
---------------------------
-> Higher performance than GPUs.
        - excellent performance on bitwise operations.
-> Better cooling.
-> Extensive customization, optimization. (bit fidling);

* FPGA mining Disadvantages
-----------------------------
-> Higher power drawn than GPUs designed for.
        - frequent malfunctions, errors.
-> poor optimization of 32-bit adds.
-> fewer hobbyists with sufficient expertise.
-> More expensive than GPUs.
-> marginal performance/cost advantage over GPUs.

# Throughput on a good card = 100-1000 MHz ~ 2^30
# 25 years on average to find a block w/100 boards!

* Bitcoin ASICs (Application Specific Integrated Circuits)
-----------------------------------------------------------------------------------
-> special purpose
        - approaching known limits on feature sizes.
        - less than 10x performance improvement expected.
-> Designed to be run constantly for life.
-> Requires significant expertise, long lead-times.
-> Perhaps the fastest chip developed ever.

* Case study: TerraMiner IV
-------------------------------
# Shipped in Jan 2014
# 2 TH/s
# Cost: US $6000

~ 14 months on an average to find a block.

* Market dynamics (2013/2014)
------------------------------
-> Most boards obsolete within 3-6 months
-> Shipped delays are delays are devastating to customers.
-> Most companies require pre-orders.
-> Most individual customers should have lost.
- But due to rising prices of Bitcoins, miners havebeen saved.

* Professional mining centers
--------------------------------------------------------------------------------
-> Needs
----------
1. cheap power
2. good netwrok
3. cool climate - georgia, iceland, etc;

* Future
----------------
-> Can small miners stay in the game?
-> Do ASICs violate the original Bitcoin vision?
-> Would we be better off without ASICs?

Q. Which statement about Bitcoin miners is NOT true?

a. If the global hash rate doubles every two months, a new piece of hardware that a miner buys will find most of the blocks that it ever will mine in the first six months of operation

b. Bitcoin miners can recoup a reasonable fraction of their initial expenses by selling their ASICs once they are done with them to other users for less computationally intense purposes. - True

c. Many miners will consider the climate of an area when setting up mine operations because of the cost of cooling their equipment

d. Mining Bitcoin on a modern CPU will yield negligible mining rewards

----------------------------------------------------------------------------------------------------------------------------------------
5.3 Energy Consumption & Ecology
----------------------------------------------------------------------------------------------------------------------------------------
* Thermodynamics limits :
--------------------------
-> (1960's) Rolf Landauer's principle: Any non-reversible computation must consume a minimum amount energy.
    Specifically, each bit changed requires (kT ln 2)joules.
-> Energuy is never destroyed, transformed from one form to another.
-> Computation -> electricity -> heat;
-> SHA-256 - non-reversible computation. (Energy consumption is inevitable);
-> Todays energy consumption is far above(1000's) time more than that generalized by Landauer.

* Energy consumption aspects of Bitcoin mining
-----------------------------------------------
# 3 steps
1. Embodied energy : used to manufacture mining chips and other equipment.
(Includes physical mining - digging out rare metals, coppers -> IC's, etc; Manufacture into Bitcoin mining ASIC);
    -> Should decrease over time. (since sufficient chip will be there, more resources online, etc);
    -> Returns to scale. (optimized on large scale)
2. Electricity : used to perform computation. (plug into wall - draws electricity - and perform computation).
    -> Should increase over time.
    -> Return to scale. (optimized on large scale)
3. Cooling : required to protect equipment.  
    -> costs more with increased scale! (not optimized in a large scale);
    
I. Estimating energy usage : top-down
------------------------------------
(How much energy is the Bitcoin using?) - approximation;

-> Each block worth approximately US$15,000 (25 BTC that's found every 10 minutes).
-> Approximately $25/s generated.
-> Industrial electricity (US): $0.03/MJ
    - $0.10/kWh
    
-> If the miners took that $25 that they earn every second and turned that into electricity investment, then they would get (Upper bound)
    900 MJ/s = 900 MW;
    
II. Estimating  energy usage: bottom-up
-----------------------------------------
-> Best claimed efficieny : 1GHz/W. (mining rigs)
-> Network hash rate: 150,000,000 Ghz.
-> (excluding cooling, embodied energy);

# Lower bound on electricity = 150,000,000 GHz / 1 GHz/W = 150 MHz W = 150MW

* How much is a MW?
--------------------
-> Three Gorges Dam (China) = 10,000 MW;
-> Typical hydro plant = 1,000 MW;
-> Nuclear power plant (Japan) = 7,000 MW;
-> Typical nuclear plant = 4,000 MW;
-> Major coal-fired plant ~ 2,000 MW;




